---
title: "Visualizations with ggplot"
date: "September 19, 2024"
title-slide-attributes:
    data-background-image: "figs/bikeshare-plots.png"
    data-background-size: contain
    data-background-opacity: "0.2"
format: 
  revealjs:
    theme: custom.scss
    transition: none
    incremental: true
    scrollable: true
    chalkboard: true
editor: visual
editor_options: 
  chunk_output_type: console
draft: false
---

# Housekeeping

```{r echo = F, warning = F}
knitr::opts_chunk$set(echo = T)
library(tidyverse)
library(readr)
plot_theme <- theme(text = element_text(size = 16))
insurance <- read_csv("data/insurance.csv") 
```

-   TA hours tonight 7-9pm, Sunday 7-9pm
-   Office hours tomorrow 2-4pm
-   Observations of Prof. Tang taking place next week

## Exploratory data analysis

-   **Exploratory data analysis (EDA)** is an approach to analyzing data sets to summarize the main characteristics.

    -   Often visual through plots

-   Because of its name "exploratory", we typically perform EDA at the beginning of a project

-   Can also calculate summary statistics and perform data wrangling/manipulation/transformation at (or before) this stage of the analysis

## Tidy data

-   When working with data in `R`, always look at the data to ensure it is in **tidy** format:

    -   Each row represents an observation, each column represents a variable describing the observations

-   `anscombe` data frame: four datasets each with 11 observations each and the same two variables

::: fragment
::: columns
::: {.column width="\"50%"}
Non-tidy version:

```{r echo = F}
anscombe
```
:::

::: {.column width="\"50%"}
Tidy version (first 15 rows):

```{r echo = F}
library(Tmisc)
quartet[1:15,]
```
:::
:::
:::

# Data visualization

-   **Data visualization** is the creation and study of the visual representation of data

-   We have learned how to use base `R` code to make simple histograms and scatterplots. We will now use `ggplot2` which makes customization easier

## Why do we visualize?

-   Summary statistics from each of the four datasets in `anscombe`:

::: fragment
```{r echo = F}
quartet %>%
  group_by(set) %>%
  summarise(
    mean_x = mean(x), mean_y = mean(y),
    sd_x = sd(x), sd_y = sd(y)
    # r = cor(x, y)
  )
```
:::

-   Let's visualize the four data sets. What would be an appropriate type of plot to examine the relationship between the two variables `x` and `y`?

::: fragment
```{r echo = F, fig.height=3}
ggplot(quartet, aes(x = x, y = y)) +
  geom_point() +
  facet_wrap(~ set, ncol = 4) +
  plot_theme
```
:::

## Introduction to ggplot

-   We will learn how to create histograms, box plots, and scatterplots using the `ggplot()` function from the `ggplot2` library

    -   Plots are constructed in layers

-   At a *minimum*, we need to specify 1) the dataset, 2) variable(s) from the dataset we'd like to plot, and 3) the type of plot

    -   How does this differ from what we've seen in the past?

-   This is what the code will generally look like. Values in \< \> and `xxx` denote what you as the coder need to specify.

::: fragment
```{r eval = F}
ggplot(data = <dataset>, # specify data frame
       mapping = aes(x = <x-var>)) + #  specify variables to be used in plot
  geom_xxx() + # specify plot type
  <other options>
```
:::

## Inheriting arguments

-   Many functions related to plotting in ggplot take the form `geom_xxx()`

-   The Help file for these functions show that the first two arguments are `mapping` and `data`. These are *automatically inherited* from the `mapping` and `data` arguments in the first layer `ggplot()` function

    -   i.e. you don't need to re-specify them, unless you are trying to add a new data frame's data to your visualization

::: fragment
![](figs/06-geom_help.png){fig-align="center" width="456"}
:::

## Additional variables + modifications

-   We emphasize making informative and useful visualizations.

    -   Informative titles and labels

    -   Plot should tell a meaningful story

-   Depending on the plot and data, we can map additional variables by:

    1.  Specifying visual cues via **aesthetics**: color, size, shape, alpha (transparency)

    2.  *Faceting* (will see this next week)

## Live code

Note: most of the code I will show is included in the remaining slides. However, we will most likely go off-script based on questions from the class!

# Slides on ggplot()

## geom_histogram()

```{r warning = T, message= T, fig.height = 4}
ggplot(data = insurance,  mapping = aes(x = charges)) +
  geom_histogram()
```

Note the message provided when you execute this code!

## geom_histogram() cont.

To improve on histogram we change the bin width.

::: columns
::: {.column width="50%"}
```{r warning = T, `code-line-numbers`="3", eval = F}
ggplot(data = insurance, 
       mapping = aes(x = charges)) +
  geom_histogram(binwidth = 5000)
```

```{r warning = T, `code-line-numbers`="3", echo = F}
ggplot(data = insurance, 
       mapping = aes(x = charges)) +
  geom_histogram(binwidth = 5000) +
  theme(text = element_text(size = 25))
```
:::

::: {.column width="50%"}
```{r warning = T, `code-line-numbers`="3", eval = F}
ggplot(data = insurance, 
       mapping = aes(x = charges)) +
  geom_histogram(bins = 20)
```

```{r warning = T, `code-line-numbers`="3", echo = F}
ggplot(data = insurance, 
       mapping = aes(x = charges)) +
  geom_histogram(bins = 20) +
  theme(text = element_text(size = 25))
```
:::
:::

## geom_boxplot()

::: columns
::: {.column width="60%"}
```{r fig.height=3, eval = F}
ggplot(data = insurance, mapping = aes(x = charges)) +
  geom_boxplot()
```

```{r fig.height=3, echo = F}
ggplot(data = insurance, 
       mapping = aes(x = charges)) +
  geom_boxplot() +
  theme(text = element_text(size = 30))
```
:::

::: {.column width="40%"}
::: fragment
```{r fig.height=6, `code-line-numbers`="2", eval = F}
ggplot(data = insurance, 
       mapping = aes(y = charges)) +
  geom_boxplot()
```

```{r fig.height=6, echo = F}
ggplot(data = insurance, 
       mapping = aes(y = charges)) +
  geom_boxplot() +
  theme(text = element_text(size = 35))
```
:::
:::
:::

## geom_point()

```{r}
ggplot(data = insurance, mapping = aes(x = age, y = charges)) +
  geom_point()
```

## Aesthetics: color

::: columns
::: {.column width="50%"}
```{r eval = F}
ggplot(data = insurance, 
       mapping = aes(x = bmi, y = charges, 
                     col = age)) +
  geom_point()
```

```{r echo = F}
ggplot(data = insurance, 
       mapping = aes(x = bmi, y = charges, 
                     col = age)) +
  geom_point(size = 2)+
  theme(text =element_text(size = 30))
```
:::

::: {.column width="50%"}
::: fragment
```{r eval = F}
ggplot(data = insurance, 
       mapping = aes(x = bmi, y = charges)) +
  geom_point(aes(col = age))
```

```{r echo = F}
ggplot(data = insurance, 
       mapping = aes(x = bmi, y = charges)) +
  geom_point(aes(col = age), size= 2) +
  theme(text = element_text(size = 30))
```
:::
:::
:::

## Aesthetics: transparency

```{r}
#| code-line-numbers: "2"
ggplot(data = insurance, mapping = aes(x = bmi, y = charges, 
                                       alpha = age)) +
  geom_point()
```

## Specifying multiple aesthetics

```{r}
ggplot(data = insurance, mapping = aes(x = bmi, y = charges, col = age, alpha = age)) +
  geom_point()
```

## When to map to variable

What's going on here?

::: columns
::: {.column width="50%"}
```{r eval = F}
ggplot(data = insurance, 
       mapping = aes(x = bmi, y = charges)) +
  geom_point(col = "purple")
```

```{r echo = F}
ggplot(data = insurance, 
       mapping = aes(x = bmi, y = charges)) +
  geom_point(col = "purple", size = 2)+
  theme(text = element_text(size = 30))
```
:::

::: {.column width="50%"}
```{r eval = F}
ggplot(data = insurance, 
       mapping = aes(x = bmi, y = charges)) +
  geom_point(aes(col = "purple"))
```

```{r echo = F}
ggplot(data = insurance, 
       mapping = aes(x = bmi, y = charges)) +
  geom_point(aes(col = "purple"), size = 2)+
  theme(text =element_text(size = 30))
```
:::
:::

-   ::: {style="color: maroon"}
    Key takeaway: aesthetics should correspond/map to a variable in the data frame
    :::

    -   "Fixed" visual cues are set outside of `aes()`

## Adding a title

```{r}
ggplot(data = insurance, mapping = aes(x = charges)) +
  geom_histogram() +
  ggtitle("Histogram of charges",
          subtitle = "In USD")
```

## Changing axis labels

By default, axis titles are taken from variable name specified in `aes()`. To change:

::: columns
::: {.column width="50%"}
```{r eval = F}
ggplot(data = insurance, 
       mapping = aes(x = charges)) +
  geom_histogram() +
  ggtitle("Histogram of charges") +
  xlab("Charges ($)")
```

```{r echo = F}
ggplot(data = insurance, mapping = aes(x = charges)) +
  geom_histogram() +
  ggtitle("Histogram of charges") +
  xlab("Charges ($)") +
  ylab("Count") +
  theme(text = element_text(size = 25))
```
:::

::: {.column width="50%"}
```{r eval = F}
ggplot(data = insurance, 
       mapping = aes(x = charges)) +
  geom_histogram() +
  labs(title = "Histogram of charges",
       x = "Charges ($)", y = "Count")
```

```{r echo = F}
ggplot(data = insurance, mapping = aes(x = charges)) +
  geom_histogram() +
  labs(title = "Histogram of charges",
       x = "Charges ($)", y = "Count") +
  theme(text = element_text(size = 25))
```
:::
:::
